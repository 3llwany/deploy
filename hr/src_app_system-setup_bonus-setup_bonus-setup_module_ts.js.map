{"version":3,"file":"src_app_system-setup_bonus-setup_bonus-setup_module_ts.js","mappings":"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","sources":["./src/app/shared/Guards/check-is-allowd.guard.ts","./src/app/system-setup/bonus-setup/bonus-setup-routing.module.ts","./src/app/system-setup/bonus-setup/bonus-setup.module.ts","./src/app/system-setup/bonus-setup/components/benefit-type/benefit-type.component.ts","./src/app/system-setup/bonus-setup/components/benefit-type/benefit-type.component.html","./src/app/system-setup/bonus-setup/components/benefit/benefit.component.ts","./src/app/system-setup/bonus-setup/components/benefit/benefit.component.html","./src/app/system-setup/bonus-setup/services/benefit-type.service.ts"],"sourcesContent":["import { inject, Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, } from \"@angular/router\";\r\nimport { UserViewsService } from \"app/auth/services/user-views.service\";\r\nimport { IUM_ModulesModel } from \"app/shared/interfaces/user-views\";\r\nimport { LoadingService } from \"app/shared/services/loading.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class CheckIsViewAllowedGuard implements CanActivate {\r\n  UserModules: IUM_ModulesModel[];\r\n  public loadingService = inject(LoadingService);\r\n  loading: HTMLElement;\r\n\r\n  constructor(private viewsService: UserViewsService) {\r\n    this.UserModules = this.viewsService.UserModules$.getValue();\r\n    this.loading = document.getElementById(\"page-loading\");\r\n  }\r\n\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean {\r\n    return true;\r\n    // un comment code for used\r\n    // let view = route.data?.view;\r\n    // this.showLoading();\r\n    // if (this.UserModules?.length > 0) {\r\n    //   if (!this.viewsService.isViewAllowed(view)) {\r\n    //     this.router.navigateByUrl(\"/auth/access-denied\");\r\n    //     this.hideLoading();\r\n    //   }\r\n    //   else {\r\n    //     this.hideLoading();\r\n    //     return true;\r\n    //   }\r\n    // }\r\n    //\r\n    // else {\r\n    //   this.viewsService.UserModules$.subscribe((val) => {\r\n    //     if (val?.length > 0) {\r\n    //       if (!this.viewsService.isViewAllowed(view)) {\r\n    //         this.router.navigateByUrl(\"/auth/access-denied\");\r\n    //         this.hideLoading();\r\n    //       }\r\n    //       else {\r\n    //         this.hideLoading();\r\n    //         return true;\r\n    //       }\r\n    //     }\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  showLoading() {\r\n    this.loading.style.display = \"block\";\r\n    this.loading.style.opacity = \"1\";\r\n    this.loading.style.zIndex = \"998\";\r\n  }\r\n\r\n  hideLoading() {\r\n    this.loading.style.display = \"none\";\r\n    this.loading.style.opacity = \"0\";\r\n    this.loading.style.zIndex = \"0\";\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { BenefitTypeComponent } from \"./components/benefit-type/benefit-type.component\";\r\nimport { ViewsManager } from \"app/shared/resources/views-manager\";\r\nimport { CheckIsViewAllowedGuard } from \"app/shared/Guards/check-is-allowd.guard\";\r\nimport { BenefitComponent } from \"./components/benefit/benefit.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"bonus-benefit-type\",\r\n    component: BenefitTypeComponent,\r\n    data: { view: ViewsManager.bonus_benefit_type },\r\n    canActivate: [CheckIsViewAllowedGuard],\r\n  },\r\n  {\r\n    path: \"bonus-benefit\",\r\n    component: BenefitComponent,\r\n    data: { view: ViewsManager.bonus_benefit },\r\n    canActivate: [CheckIsViewAllowedGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class BonusSetupRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { BonusSetupRoutingModule } from \"./bonus-setup-routing.module\";\r\nimport { BenefitTypeComponent } from \"./components/benefit-type/benefit-type.component\";\r\nimport { BenefitComponent } from \"./components/benefit/benefit.component\";\r\nimport { SharedModule } from \"app/shared/shared.module\";\r\n\r\n@NgModule({\r\n  declarations: [BenefitTypeComponent, BenefitComponent],\r\n  imports: [CommonModule, BonusSetupRoutingModule, SharedModule],\r\n})\r\nexport class BonusSetupModule {}\r\n","import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { FormGroup, Validators } from \"@angular/forms\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { AppHelpers } from \"app/shared/resources/app-helpers\";\r\nimport { IBenefitType } from \"../../models/benefit-type\";\r\nimport { BenefitTypeService } from \"../../services/benefit-type.service\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ICreateDialog } from \"app/shared/interfaces/dropdown.interface\";\r\nimport { CustomValidator } from \"app/shared/validators/custom.validator\";\r\nimport { IPageParams } from \"app/shared/interfaces/params\";\r\nimport { IResponse, IResponseList } from \"app/shared/interfaces/responces\";\r\nimport { MessageTypes } from \"app/shared/enums/message-types.enum\";\r\n\r\n@Component({\r\n  selector: \"app-benefit-type\",\r\n  templateUrl: \"./benefit-type.component.html\",\r\n  styleUrls: [\"./benefit-type.component.scss\"],\r\n})\r\nexport class BenefitTypeComponent extends AppHelpers implements OnInit {\r\n  form: FormGroup;\r\n  submitted: boolean = false;\r\n  mandatoryColomns: string[] = [\"Ser\", \"id\", \"ar_Name\", \"en_Name\", \"actions\"];\r\n  isLoaded: boolean = false;\r\n  optionalColomns: string[] = [];\r\n  dataSource: MatTableDataSource<IBenefitType>;\r\n\r\n  constructor(\r\n    public benefitTypeService: BenefitTypeService,\r\n    @Inject(MAT_DIALOG_DATA) public data: ICreateDialog,\r\n    public dialogRef: MatDialogRef<BenefitTypeComponent>\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.fb.group({\r\n      id: [0, {nonNullable: true}],\r\n      ar_Name: [null, [Validators.required, CustomValidator.whiteSpace]],\r\n      en_Name: [null, [Validators.required, CustomValidator.whiteSpace]],\r\n    });\r\n    if (this.data.value) {\r\n      this.formCtrls.ar_Name.setValue(this.data.value);\r\n      this.formCtrls.en_NAme.setValue(this.data.value);\r\n    }\r\n  }\r\n\r\n  get formCtrls() {\r\n    return this.form.controls;\r\n  }\r\n\r\n  override onChangeBusinessAndCompanyId(): void {\r\n    if (this.dataSource?.data?.length > 0)\r\n      this.dataSource = new MatTableDataSource(null);\r\n    if (this.checkNoBusinessOrCompany()) this.getList(this.firstPage);\r\n  }\r\n\r\n  getList(page: number, pageSize?: number) {\r\n    this.isLoaded = false;\r\n    this.page.pageIndex = page;\r\n    if (pageSize) this.page.pageSize = pageSize;\r\n    let params: IPageParams = {\r\n      PageNumber: page,\r\n      pageSize: this.page.pageSize,\r\n    };\r\n\r\n    if (!this.data.isDialog) {\r\n      this.benefitTypeService\r\n        .getList(params)\r\n        .pipe(this.cancelRequest())\r\n        .subscribe((res: IResponseList<IBenefitType[]>) => {\r\n          if (res.message.messageType == MessageTypes.Success) {\r\n            this.dataSource = new MatTableDataSource(res.data);\r\n            this.isLoaded = true;\r\n            this.page.length = res.meta.totalItemCount;\r\n            this.page.meta = res.meta;\r\n          }\r\n          else this.errorList(res?.message?.messages);\r\n        });\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.submitted = true;\r\n    if (this.form.valid) {\r\n      const model: IBenefitType = {\r\n        id: this.form.value.id,\r\n        ar_Name: this.form.value.ar_Name,\r\n        en_Name: this.form.value.en_Name,\r\n        isRange: false,\r\n      };\r\n\r\n      model.id == 0 ? this.create(model) : this.update(model);\r\n    }\r\n  }\r\n\r\n  create(model: IBenefitType) {\r\n    this.showLoading();\r\n    this.benefitTypeService\r\n      .create(model)\r\n      .subscribe((res: IResponse<IBenefitType>) => {\r\n        if (res.message.messageType == MessageTypes.Success) {\r\n          this.clearForm();\r\n          this.getList(this.lastPage, this.page.pageSize);\r\n          this.addSuccessfullyMsg(res?.message?.messageTypeName);\r\n          if (this.data.isDialog) this.dialogRef.close();\r\n        }\r\n        else this.errorList(res?.message?.messages);\r\n        this.hideLoading();\r\n      });\r\n  }\r\n\r\n  update(model: IBenefitType) {\r\n    this.showLoading();\r\n    this.benefitTypeService\r\n      .update(model)\r\n      .subscribe((res: IResponse<IBenefitType>) => {\r\n        if (res.message.messageType == MessageTypes.Success) {\r\n          this.clearForm();\r\n          this.getList(this.currentPage, this.page.pageSize); // current page after update\r\n          this.updateSuccessfullyMsg(res?.message?.messageTypeName);\r\n        }\r\n        else this.errorList(res?.message?.messages);\r\n        this.hideLoading();\r\n      });\r\n  }\r\n\r\n  benefitToEdit(benefit: IBenefitType) {\r\n    this.form.patchValue(benefit);\r\n  }\r\n\r\n  onDelete(benefit: IBenefitType): void {\r\n    let msg = this.msgTranslate(benefit.ar_Name, benefit.en_Name);\r\n    this.deleteDialog(msg).subscribe((confirm) => {\r\n      if (confirm) this.delete(benefit);\r\n    });\r\n  }\r\n\r\n  delete(benefit: IBenefitType) {\r\n    this.showLoading();\r\n    this.benefitTypeService.Delete(benefit.id).subscribe((res: IResponse) => {\r\n      if (res.message.messageType == MessageTypes.Success) {\r\n        this.deleteSuccessfullyMsg(res?.message?.messageTypeName);\r\n        if (this.dataSource.data.length == 1 && this.currentPage > 1) {\r\n          // if last item in list: get previous page\r\n          this.getList(this.prevPage, this.page.pageSize);\r\n        }\r\n        else {\r\n          // if not last item in list: get current page\r\n          this.getList(this.currentPage, this.page.pageSize);\r\n        }\r\n        if (benefit.id == this.formCtrls.id.value) this.clearForm();\r\n      }\r\n      else this.errorList(res?.message?.messages);\r\n      this.hideLoading();\r\n    });\r\n  }\r\n\r\n  clearForm() {\r\n    this.form.reset({id: 0});\r\n    this.submitted = false;\r\n  }\r\n\r\n  onCloseDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-12\">\r\n    <mat-card class=\"form-card\">\r\n      <mat-card-title>\r\n        <page-title\r\n          [id]=\"formCtrls.id.value\"\r\n          addTitle=\"benefitType\"\r\n          editTitle=\"editBenefitType\"\r\n        >\r\n        </page-title>\r\n\r\n        <close-dialog-btn\r\n          *ngIf=\"data.isDialog\"\r\n          (click)=\"onCloseDialog()\"\r\n        ></close-dialog-btn>\r\n      </mat-card-title>\r\n\r\n      <mat-card-content class=\"container-fluid\">\r\n        <!-- <div class=\"row\">\r\n          <div class=\"col-12\"> -->\r\n        <form [formGroup]=\"form\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 col-12\">\r\n              <app-input\r\n                [control]=\"formCtrls.ar_Name\"\r\n                [submitted]=\"submitted\"\r\n                label=\"ar_Name\"\r\n              >\r\n              </app-input>\r\n            </div>\r\n            <div class=\"col-md-6 col-12\">\r\n              <app-input\r\n                [control]=\"formCtrls.en_Name\"\r\n                [submitted]=\"submitted\"\r\n                label=\"en_Name\"\r\n              >\r\n              </app-input>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <!-- </div>\r\n        </div> -->\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions align=\"end\">\r\n        <reset-form-btn\r\n          *ngIf=\"formCtrls.id.value > 0\"\r\n          (click)=\"clearForm()\"\r\n        ></reset-form-btn>\r\n        <submit-btn [id]=\"formCtrls.id.value\" (onClick)=\"submit()\"></submit-btn>\r\n      </mat-card-actions>\r\n\r\n      <ng-container *ngIf=\"!data.isDialog\">\r\n        <mat-divider></mat-divider>\r\n        <app-material-table\r\n          [isLoaded]=\"isLoaded\"\r\n          [dataSource]=\"dataSource\"\r\n          [mandatoryColomns]=\"mandatoryColomns\"\r\n          [optionalColomns]=\"optionalColomns\"\r\n          [page]=\"page\"\r\n          [actions]=\"rowFunctions\"\r\n          [exportService]=\"benefitTypeService\"\r\n          (onChangePage)=\"getList($event.pageIndex + 1, $event.pageSize)\"\r\n          (editRow)=\"benefitToEdit($event)\"\r\n          (deleteRow)=\"onDelete($event)\"\r\n        >\r\n        </app-material-table>\r\n      </ng-container>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-benefit',\r\n  templateUrl: './benefit.component.html',\r\n  styleUrls: ['./benefit.component.scss']\r\n})\r\nexport class BenefitComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>benefit works!</p>\r\n","import { Injectable } from \"@angular/core\";\r\nimport { AppClientService } from \"app/shared/services/app-client.service\";\r\nimport { IBenefitType } from \"../models/benefit-type\";\r\nimport { IResponse, IResponseList } from \"app/shared/interfaces/responces\";\r\nimport { IPageParams } from \"app/shared/interfaces/params\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class BenefitTypeService extends AppClientService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  create(data: IBenefitType) {\r\n    return this.post<IResponse<IBenefitType>>(\"BenefitType/Create\", data);\r\n  }\r\n\r\n  update(data: IBenefitType) {\r\n    return this.post<IResponse<IBenefitType>>(\"BenefitType/Edit\", data);\r\n  }\r\n\r\n  getList(params: IPageParams) {\r\n    return this.get<IResponseList<IBenefitType[]>>(\"BenefitType/GetList\", {\r\n      params: params,\r\n    });\r\n  }\r\n\r\n  getAll() {\r\n    return this.get<IResponse<IBenefitType[]>>(\"BenefitType/GetAll\");\r\n  }\r\n\r\n  Delete(id: number) {\r\n    return this.delete<IResponse>(\"BenefitType/Delete\", {\r\n      params: { Id: id },\r\n    });\r\n  }\r\n\r\n  exportExcel() {\r\n    this.getAll();\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}